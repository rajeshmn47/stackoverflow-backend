const uri =
  'mongodb+srv://rajeshmn47:uni1ver%40se@cluster0.bpxam.mongodb.net/myFirstDatabase?retryWrites=true&w=majority'
const db = uri
mongoose.Promise = global.Promise

mongoose.connect(
  uri,
  { useNewUrlParser: true, useUnifiedTopology: true },
  function (error) {
    if (error) {
      console.log('Error!' + error)
    }
  }
)

router.get('/deleteonequestion/:id',
  catchasyncerror(async (req, res, next) => {
    const question = await Question.findById(req.params.id)
    await question.remove()
    res.status(200).json({
      success: true,
    })
  })
)
router.get('/editonequestion/:id',
  catchasyncerror(async (req, res, next) => {
    const question = await Question.findById(req.params.id)
    question.text=req.body.text
    await question.save()
    res.status(200).json({
      success: true,
    })
  })
)

router.get('/editoneanswer/:id',catchasyncerror(async (req, res, next) => {
  const question = await Question.findById(req.params.id)
  question.answers.forEach((ans) => {
  if(ans._id.toString()===req.body.answerid.toString()){
    ans.text=req.body.text
  }})
  await question.save()
  res.status(200).json({
    success: true,
  })
})
)

router.get('/deleteoneanswer/:id',catchasyncerror(async (req, res, next) => {
  const question = await Question.findById(req.params.id)
  const answers = question.answers.filter(
    (rev) => rev._id.toString() !== req.body.id.toString()
  );

  await Question.findByIdAndUpdate(
    req.params.id,
    {
      answers,
    },
    {
      new: true,
      runValidators: true,
      useFindAndModify: false,
    }
  );
  res.status(200).json({
    success: true,
  })
})
)

